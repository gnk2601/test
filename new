import threading
import asyncio
from functools import partial
import datetime

import json
import logging
import websockets

connected=set()
lock=threading.Lock()
#https://eightnoteight.wordpress.com/2016/09/24/multiple-event-loops-in-different-threads/
async def register(websocket):
    global connected
    lock.acquire()
    connected.add(websocket)
    lock.release()
async def counter(websocket, path):
    # register(websocket) sends user_event() to websocket
    print("new connection")
    await register(websocket)

    #for i in connected:
    #    print(i.remote_address)

def main_loop():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(websockets.serve(counter, 'localhost', 6789))
    print("server started")
    loop.run_forever()

async def send_data():
    global connected
    while True:
        if connected:
            lock.acquire()
            print("locked")
            for i in connected:
                #print(dir(i))
                await i.send('vijay')#str(datetime.datetime.now()))
            lock.release()
            print("unlocked")
                

"""def multi_event_loops():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    loop.run_until_complete(asyncio.gather(t1, t2))"""

def creepy():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    #t1 = send_data()
    print("send loop entered")
    loop.run_until_complete(send_data())
    print("send loop started")
    loop.run_forever()

def main():
    threading.Thread(target=creepy).start()
    threading.Thread(target=main_loop).start()
    #threading.Thread(target=multi_event_loops).start()
    #for _ in range(3):
    #    threading.Thread(target=multi_event_loops).start()


main()
###################################

import threading
import asyncio
from functools import partial
import datetime

import json
import logging
import websockets

connected = set()
lock=threading.Lock()

async def send_data_to_all(ws,data):
    await ws.send(data)

async def register(wss):
    lock.acquire()
    connected.add(wss)
    lock.release()
    
async def unregister(ws):
    lock.acquire()
    connected.remove(ws)
    lock.release()
    
    
#@asyncio.coroutine
async def counter(ws,pos):
    await register(ws)
    print("new connection added")
    try:
        async for m in ws:
            user_data=json.loads(m)
            print(m,user_data)
            continue
    except Exception as e:
        print(e)
    

@asyncio.coroutine
def send_data():
    while True:
        time_data=str(datetime.datetime.now())
        task=asyncio.gather(*[send_data_to_all(i,time_data) for i in connected])
        #for i in connected:
        #    yield from i.send(time_data)
        yield from asyncio.sleep(.1)
        
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
loop.run_until_complete(websockets.serve(counter, 'localhost', 6789))
asyncio.async(send_data())
print("server started")
loop.run_forever()
#####
<!DOCTYPE html>
<html>
    <head>
        <title>WebSocket demo</title>
        <script>
            
        
            function test(){
var websocket = new WebSocket("ws://127.0.0.1:6789/");
            websocket.onmessage = function (event) {
                
                //data = JSON.parse(event.data);
                //alert(event.data);
                document.getElementById('demo').innerHTML=event.data;
            };

		websocket.onopen=function(e){alert("connection made");}
		websocket.onerror=function(e){alert(e);}
		websocket.onclose=function(e){alert("connection closed");setTimeout(test,5000)}
	}
	function send_data_to_server(){websocket.send(document.getElementById('user_input').innerHTML);}
	
        </script>
</head>
    <body onload="test();">
    
    <p id='demo'></p></br>
<input type="text" id="user_input" />
<button onclick="send_data_to_server();">send</button>
    </body>
</html>
#################################
import threading
import asyncio
from functools import partial
import datetime

import json
import logging
import websockets

connected = set()
lock=threading.Lock()

async def send_data_to_all(ws,data):
    try:
        await ws.send(data)
    except Exception as e:
        return ws
        

async def register(wss):
    lock.acquire()
    connected.add(wss)
    lock.release()
    
async def unregister(ws):
    lock.acquire()
    connected.remove(ws)
    lock.release()
    
    
#@asyncio.coroutine
async def counter(ws,pos):
    await register(ws)
    print("new connection added")
    try:
        async for m in ws:
            print(m)
            continue
    except Exception as e:
        print(e)
    

@asyncio.coroutine
def send_data():
    while True:
        time_data=str(datetime.datetime.now())
        task=asyncio.gather(*[send_data_to_all(i,time_data) for i in connected])
        #if type(task._result)!=None:
        #    print(len(task._result))
        #for closed_ws in task._result:
         #   print("closing connection on error",closed_ws.remote_address)
        #    yield unregister(closed_ws)
        #for i in connected:
        #    yield from i.send(time_data)
        yield from asyncio.sleep(1)
        
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
loop.run_until_complete(websockets.serve(counter, 'localhost', 6789))
asyncio.async(send_data())
print("server started")
loop.run_forever()
####
<!DOCTYPE html>
<html>
    <head>
        <title>WebSocket demo</title>
        <script>
            var websocket;
        //window.onbeforeunload = function () {alert("close");return null;}
//window.addEventListener("beforeunload", function () {alert("close");});

//window.addEventListener("beforeunload", function (e) {
//  alert("");

//  (e || window.event).returnValue = null;
//  return null;
//});
            function test(){

 websocket = new WebSocket("ws://127.0.0.1:6789/");
            websocket.onmessage = function (event) {
                
                //data = JSON.parse(event.data);
                //alert(event.data);
                document.getElementById('demo').innerHTML=event.data;
            };

		websocket.onopen=function(e){alert("connection made");}
		websocket.onerror=function(e){alert(e);}
		websocket.onclose=function(e){alert("connection closed");setTimeout(test,5000)}
	}
	function send_data_to_server(){websocket.send(document.getElementById('user_input').value);
	alert(document.getElementById('user_input').value);}
	
        </script>
</head>
//onbeforeunload="alert("");"
    <body  onload="test();">
    
    <p id='demo'></p></br>
<input type="text" id="user_input" />
<button onclick="send_data_to_server();">send</button>
    </body>
</html>
